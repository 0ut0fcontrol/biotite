from biotite.structure.bonds import BondList
from numpy import (
    int64,
    ndarray,
)
from typing import (
    Any,
    List,
    Optional,
    Type,
    Union,
)


def array(atoms: List[Atom]) -> AtomArray: ...


def coord(item: Any) -> ndarray: ...


def stack(arrays: List[AtomArray]) -> AtomArrayStack: ...


class Atom:
    def __eq__(self, item: Atom) -> bool: ...
    def __init__(self, coord: Union[List[int], ndarray], **kwargs) -> None: ...
    def __setattr__(self, attr: str, value: Union[str, ndarray]) -> None: ...


class AtomArray:
    def __copy_create__(self) -> AtomArray: ...
    def __delitem__(self, index: int) -> None: ...
    def __eq__(self, item: AtomArray) -> bool: ...
    def __getitem__(
        self,
        index: Union[List[int], slice, int, ndarray]
    ) -> Union[Atom, AtomArray]: ...
    def __init__(self, length: Union[int64, int]) -> None: ...
    def __len__(self) -> int: ...
    def __ne__(self, item: AtomArray) -> bool: ...
    def __setitem__(self, index: int, atom: Atom) -> None: ...
    def get_atom(self, index: int) -> Atom: ...


class AtomArrayStack:
    def __copy_create__(self) -> AtomArrayStack: ...
    def __delitem__(self, index: int) -> None: ...
    def __eq__(self, item: AtomArrayStack) -> bool: ...
    def __getitem__(
        self,
        index: Any
    ) -> Union[AtomArrayStack, AtomArray]: ...
    def __init__(self, depth: int, length: Union[int64, int]) -> None: ...
    def __len__(self) -> int: ...
    def get_array(self, index: int) -> AtomArray: ...
    def stack_depth(self) -> int: ...


class _AtomArrayBase:
    def __add__(
        self,
        array: Union[AtomArrayStack, AtomArray]
    ) -> Union[AtomArrayStack, AtomArray]: ...
    def __copy_fill__(
        self,
        clone: Union[AtomArrayStack, AtomArray]
    ) -> None: ...
    def __eq__(self, item: Union[AtomArrayStack, AtomArray]) -> bool: ...
    def __getattr__(self, attr: str) -> Optional[Union[BondList, ndarray]]: ...
    def __init__(self, length: Union[int64, int]) -> None: ...
    def __setattr__(
        self,
        attr: str,
        value: Optional[Union[BondList, ndarray, int64, int]]
    ) -> None: ...
    def _copy_annotations(
        self,
        clone: Union[AtomArrayStack, AtomArray]
    ) -> None: ...
    def _del_element(self, index: int) -> None: ...
    def _set_element(self, index: int, atom: Atom) -> None: ...
    def _subarray(
        self,
        index: Union[List[int], slice, ndarray]
    ) -> Union[AtomArrayStack, AtomArray]: ...
    def add_annotation(self, category: str, dtype: Union[Type[int], Type[float], str, Type[bool]]) -> None: ...
    def array_length(self) -> Union[int64, int]: ...
    def equal_annotation_categories(
        self,
        item: Union[AtomArrayStack, AtomArray]
    ) -> bool: ...
    def equal_annotations(
        self,
        item: Union[AtomArrayStack, AtomArray]
    ) -> bool: ...
    def get_annotation(self, category: str) -> ndarray: ...
    def get_annotation_categories(self) -> List[str]: ...
    def set_annotation(self, category: str, array: ndarray) -> None: ...
