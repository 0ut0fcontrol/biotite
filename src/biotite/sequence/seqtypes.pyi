from biotite.sequence.alphabet import LetterAlphabet
from numpy import str_
from typing import (
    Any,
    List,
    Tuple,
    Union,
)


class NucleotideSequence:
    def __copy_create__(self) -> NucleotideSequence: ...
    def __init__(self, sequence: str = [], ambiguous: bool = False) -> None: ...
    def complement(self) -> NucleotideSequence: ...
    def get_alphabet(self) -> LetterAlphabet: ...
    def translate(
        self,
        **kwargs
    ) -> Union[ProteinSequence, Tuple[List[Any], List[Any]], Tuple[List[ProteinSequence], List[Tuple[int, int]]]]: ...


class ProteinSequence:
    def __init__(self, sequence: str = []) -> None: ...
    @staticmethod
    def convert_letter_1to3(symbol: str_) -> str: ...
    @staticmethod
    def convert_letter_3to1(symbol: str) -> str: ...
    def get_alphabet(self) -> LetterAlphabet: ...
    def remove_stops(self) -> ProteinSequence: ...
