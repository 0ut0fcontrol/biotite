# This source code is part of the Biotite package and is distributed
# under the 3-Clause BSD License. Please see 'LICENSE.rst' for further
# information.

from typing import Dict, Tuple, Union, List, Hashable
import numpy as np
from ..alphabet import Alphabet

class SubstitutionMatrix:
    def __init__(
        self,
        alphabet1: Alphabet,
        alphabet2: Alphabet,
        score_matrix: Union[
            str,
            np.ndarray,
            Dict[Tuple[Hashable, Hashable], int]
        ]
    ) -> None: ...
    def get_alphabet1(self) -> Alphabet: ...
    def get_alphabet2(self) -> Alphabet: ...
    def score_matrix(self) -> np.ndarray: ...
    def transpose(self) -> SubstitutionMatrix: ...
    def is_symmetric(self) -> bool: ...
    def get_score_by_code(self, code1: int, code2: int) -> int: ...
    def get_score(self, symbol1: Hashable, symbol2: Hashable) -> int: ...
    def shape(self) -> Tuple[int, int]: ...
    def __str__(self) -> str: ...
    @staticmethod
    def dict_from_str(string: str) -> Dict[Tuple[str, str], int]: ...
    @staticmethod
    def dict_from_db(
        matrix_name: str
    ) -> Dict[Tuple[Hashable, Hashable], int]: ...
    @staticmethod
    def list_db() -> List[str]: ...
    @staticmethod
    def std_nucleotide_matrix() -> SubstitutionMatrix: ...
    @staticmethod
    def std_protein_matrix() -> SubstitutionMatrix: ...
